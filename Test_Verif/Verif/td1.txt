EXO 1 : PARITÉ
Ecrire un programme qui détermine à partir d’une valeur passée en paramètre, le plus petit entier pair
qui lui est supérieur.

1. Donner ses spécifications sous forme de pre et post conditions en utilisant la logique des prédicats

PreCondition: val € |N

PostCondition : res €N && res mode 2 = 0 && res >= val && res <= val+1


int prochainPair(int val){
    int res;
    if(val%2==0){
        res = val;
    }else{
        res = val+1;
    }
    return res;
}


2. Arbre de preuve dont la racine est le triplet de Hoare: {PreCondition} S {PostCondition}

{(val € |N)} prochainPair(val) {(res € |N && res mod 2 = 0 && res >= val && res <= val+1)}

3. Prouver la validité de ce triplet

Axiome: =
composition: ;
conditionnelle: if else
conséquences: modifier - PreCondition&&PostCondition - équivalents



axiome : {VAL € N && VAL % 2 = 0} RES = VAL {RES € N && RES % 2 = 0}    Axiome Valide
         R                          S                   M                       R => M 

voir photos pour l Arbre


exo 2 
Soit le programme java suivant :
int racine(int n){
int r=0;
while (n >= (r+1)*(r+1))
{
r = r+1
}
return r
}
1. Que calcule ce programme
2. Ecrire le triplet de Hoare correspondant à ce programme
3. Trouver l’invariant de boucle
4. Démontrer la validité du triplet en appliquant les règles de déductions de la logique de Hoare

1. Le plus petit entier supérieur ou égal à la racine carrée d’un entier positif soit la partie entiere de la racine d'un entier

2. {n€N OU n€Z&&n>=0} racine(n) {r€N && n/r >= r && (r+1)² > n}






















