Bernouilli <- function(n, p){
echantillon <- rbinom(n, 1, p)
table(echantillon)/n
}
Bernouilli(100, 0.1)
Binomial <- function(n, p){
echantillon <- rbinom(n, 10, p)
Tab_Binomial <- table(echantillon)
hist(Tab_Binomial, breaks = 10, probability = TRUE)
Tab_Binomial/n
}
Binomial(100, 0.5)
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique(100, 0.2)
Poisson <- function(n, lamb){
echantillon <- rpois(n,lamb)
Tab_P <- table(echantillon)
hist(Tab_P, probability = TRUE)
Tab_P/n
}
Poisson(100, 10)
Uniforme <- function(n){
echantillon <- floor(runif(n,1,n+1))
Tab_U <- table(echantillon)
hist(Tab_U, breaks = 10, probability = TRUE)
Tab_U/n
}
Uniforme(10)
Uniforme2 <- function(){
echantillon <- runif(100,-1,1)
Tab_U <- table(echantillon)
hist(Tab_U, probability = TRUE)
}
Uniforme2()
Geometrique(100,0.5)
View(Uniforme2)
View(Uniforme)
View(Poisson)
View(Binomial)
View(Poisson)
lapply(ptitanic,class)
library(rpart)
library(rpart.plot)
data(ptitanic)
lapply(ptitanic,class)
ptitanicTree <- rpart(survived~.,data=ptitanic)
View(ptitanicTree)
View(ptitanicTree)
plotcp(ptitanicTree)
ptitanicTree <- rpart(survived~.,data=ptitanic,control=rpart.control(minsplit=5,cp=0))
plotcp(ptitanicTree)
View(ptitanicTree)
ptitanicSimple <- prune(ptitanicTree,cp=0.0047)
plotcp(ptitanicSimple)
ptitanicOptimal <- prune(ptitanicTree,cp=ptitanicTree$cptable[which.min(ptitanicTree$cptable[,4]),1])
plotcp(ptitanicOptimal)
View(ptitanicOptimal)
prp(ptitanicOptimal,extra=1)
prp(ptitanicTree,extra=1)
prp(ptitanicOptimal,extra=1)
table(ptitanic$survived, predict(ptitanicOptimal, ptitanic, type="class"))
View(ptitanic)
prp(ptitanicOptimal,extra=3)
prp(ptitanicOptimal,extra=4)
prp(ptitanicOptimal,extra=5)
prp(ptitanicOptimal,extra=6)
prp(ptitanicOptimal,extra=20)
prp(ptitanicOptimal,extra=10)
prp(ptitanicOptimal,extra=3)
help(rpart)
prp(ptitanicTree,extra=3)
prp(ptitanicOptimal,extra=2)
prp(ptitanicTree,extra=2)
plotcp(ptitanicOptimal)
plotcp(ptitanicTree)
library(rpart)
library(rpart.plot)
data(ptitanic)
lapply(ptitanic,class)
ptitanicTree <- rpart(survived~.,data=ptitanic)
ptitanicTree <- rpart(survived~.,data=ptitanic,control=rpart.control(minsplit=5,cp=0))
ptitanicSimple <- prune(ptitanicTree,cp=0.0047)
ptitanicOptimal <- prune(ptitanicTree,cp=ptitanicTree$cptable[which.min(ptitanicTree$cptable[,4]),1])
plotcp(ptitanicTree)
prp(ptitanicOptimal,extra=2)
prp(ptitanicTree,extra=2)
table(ptitanic$survived, predict(ptitanicOptimal, ptitanic, type="class"))
help(rpart)
table(ptitanic$survived, predict(ptitanicOptimal, ptitanic, type="class"))
plotcp(ptitanicOptimal)
prp(ptitanicOptimal,extra=2)
tree2 = prune(ptitanicTree,cp=0.47)
plotcp(tree2)
prp(tree2)
tree2 = prune(ptitanicTree,cp=0.047)
prp(tree2)
tree2 = prune(ptitanicTree,cp=0.0047)
prp(tree2)
predict(tree2,ptitanic[1:5,])
predict(tree2,ptitanic[1:5,],type="class")
MatConf = table(ptitanic$survived, predict(tree2, ptitanic, type="class"))
tb = sum(diag(MatConf))//nrow(ptitanic)
tb = sum(diag(MatConf))/nrow(ptitanic)
tb
te = -tb
te
te = 1-tb
te
diag(MatConf)/apply(MatConf,1,sum)
data(iris)
force(iris)
nr = nrow(iris)
ntrain = floor(2*n/3)
ntest = n - ntrain
n = nrow(iris)
ntrain = floor(2*n/3)
ntest = n - ntrain
data(iris)
n = nrow(iris)
ntrain = floor(2*n/3)
ntest = n - ntrain
indextrain = sample(1:n,ntrain,replace=FALSE)
train = iris(indextrain)
train = iris[indextrain,]
test = iris - train
test = iris[-indextrain,]
View(iris)
View(iris)
View(iris)
irsiTree <- rpart(Sepal.length~.,data=train)
View(iris)
irsiTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree)
View(irsiTree)
View(irsiTree)
irisTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree)
prp(irisTree, extra = 1)
prp(irisTree, extra = 10)
prp(irisTree, extra = 10)
data(iris)
lapply(iris,class)
n = nrow(iris)
ntrain = floor(2*n/3)
ntest = n - ntrain
indextrain = sample(1:n,ntrain,replace=FALSE)
train = iris[indextrain,]
test = iris[-indextrain,]
irisTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree, extra = 10)
data(iris)
lapply(iris,class)
n = nrow(iris)
ntrain = floor(2*n/3)
ntest = n - ntrain
indextrain = sample(1:n,ntrain,replace=FALSE)
train = iris[indextrain,]
test = iris[-indextrain,]
irisTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree, extra = 10)
lapply(train,class)
irisTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree, extra = 10)
irisTree <- rpart(Sepal.Length~.,data=train)
prp(irisTree, extra = 2)
irisTree <- rpart(Species.Length~.,data=train)
prp(irisTree, extra = 2)
irisTree <- rpart(Species~.,data=train)
prp(irisTree, extra = 2)
View(iris)
plotcp(irisTree)
prp(irisTree, extra = 2)
MatConf = table(iris$Species,test,type="class")
MatConf = table(iris$Species,test)
prev= predict(arbre, train,type="class")
MAtConf=table(train$Species,prev)
print(MatConf)
prev = predict(irisTree, train,type="class")
MAtConf=table(train$Species,prev)
print(MatConf)
MatConf=table(train$Species,prev)
print(MatConf)
tb.classes = diag(MatConf)/apply(MatConf,1,sum)
print(tb.classes)
tb = sum(diag(MatConf))/ntrain
print(tb)
prev = predict(irisTree, test,type="class")
MatConfTest=table(test$Species,prev)
print(MatConf)
tbTest.classes = diag(MatConf)/apply(MatConf,1,sum)
print(tbTest.classes)
tbTest = sum(diag(MatConf))/ntest
print(tbTest)
prev = predict(irisTree, test,type="class")
MatConfTest=table(test$Species,prev)
print(MatConfTest)
tbTest.classes = diag(MatConfTest)/apply(MatConfTest,1,sum)
print(tbTest.classes)
tbTest = sum(diag(MatConf))/ntest
print(tbTest)
prev = predict(irisTree, test,type="class")
MatConfTest=table(test$Species,prev)
print(MatConfTest)
tbTest.classes = diag(MatConfTest)/apply(MatConfTest,1,sum)
print(tbTest.classes)
tbTest = sum(diag(MatConfTest))/ntest
print(tbTest)
Test_Classif_Correl <- read.table("~/Documents/S3/3-IA/Arbres-de-decision-et-forets-aleatoires/ING2_GI_ML_Tree_DATA/Test_Classif_Correl.txt", quote="\"", comment.char="")
View(Test_Classif_Correl)
Test_Classif_dpt <- read.delim("~/Documents/S3/3-IA/Arbres-de-decision-et-forets-aleatoires/ING2_GI_ML_Tree_DATA/Test_Classif_dpt.txt", header=FALSE)
View(Test_Classif_dpt)
View(Test_Classif_Correl)
plot(Test_Classif_dpt)
plot(x = Test_Classif_dpt.X1, y = Test_Classif_dpt.X2)
plot(x = Test_Classif_dpt.V1, y = Test_Classif_dpt.V2)
myData = read.table("Test_Classif_dpt",header="T")
myData = read.table("Test_Classif_dpt.txt",header="T")
myData = read.table("Test_Classif_dpt.txt",header=T)
plot(Test_Classif_dpt$X1,Test_Classif_dpt$X2,col=Test_Classif_dpt$Y)
plot(Test_Classif_dpt$X1,Test_Classif_dpt$X2,col=Test_Classif_dpt$Y)
View(Test_Classif_dpt)
setwd("~/Documents/S3/3-IA/Arbres-de-decision-et-forets-aleatoires/ING2_GI_ML_Tree_DATA")
myData = read.table("Test_Classif_dpt.txt",header=T)
plot(myData$X1,myData$X2,col=myDatat$Y)
plot(myData$X1,myData$X2,col=myData$Y)
tree <- rpart(Y.,data=myData,control=rpart.control(minsplit=5,cp=0))
tree <- rpart(Y~.,data=myData,control=rpart.control(minsplit=5,cp=0))
plot(tree, extra = 2)
prp(tree, extra = 2)
prp(tree)
myData$Y =as.factor(myData$Y)
tree <- rpart(Y~.,data=myData,control=rpart.control(minsplit=5,cp=0))
prp(tree)
prp(tree,extra=2)
myData = read.table("Test_Classif_Correl.txt",header=T)
plot(myData$X1,myData$X2,col=myData$Y)
myData$Y =as.factor(myData$Y)
tree <- rpart(Y~.,data=myData,control=rpart.control(minsplit=5,cp=0))
prp(tree,extra=2)
