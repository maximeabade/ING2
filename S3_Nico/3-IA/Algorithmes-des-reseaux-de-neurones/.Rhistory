Bernouilli <- function(n, p){
echantillon <- rbinom(n, 1, p)
table(echantillon)/n
}
Bernouilli(100, 0.1)
Binomial <- function(n, p){
echantillon <- rbinom(n, 10, p)
Tab_Binomial <- table(echantillon)
hist(Tab_Binomial, breaks = 10, probability = TRUE)
Tab_Binomial/n
}
Binomial(100, 0.5)
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique <- function(n, p){
echantillon <- rgeom(n,p)
Tab_Geo <- table(echantillon)
hist(Tab_Geo, breaks = 10,probability = TRUE)
Tab_Geo/n
}
Geometrique(100, 0.2)
Poisson <- function(n, lamb){
echantillon <- rpois(n,lamb)
Tab_P <- table(echantillon)
hist(Tab_P, probability = TRUE)
Tab_P/n
}
Poisson(100, 10)
Uniforme <- function(n){
echantillon <- floor(runif(n,1,n+1))
Tab_U <- table(echantillon)
hist(Tab_U, breaks = 10, probability = TRUE)
Tab_U/n
}
Uniforme(10)
Uniforme2 <- function(){
echantillon <- runif(100,-1,1)
Tab_U <- table(echantillon)
hist(Tab_U, probability = TRUE)
}
Uniforme2()
Geometrique(100,0.5)
View(Uniforme2)
View(Uniforme)
View(Poisson)
View(Binomial)
View(Poisson)
lapply(ptitanic,class)
library(rpart)
library(rpart.plot)
data(ptitanic)
lapply(ptitanic,class)
ptitanicTree <- rpart(survived~.,data=ptitanic)
View(ptitanicTree)
View(ptitanicTree)
plotcp(ptitanicTree)
ptitanicTree <- rpart(survived~.,data=ptitanic,control=rpart.control(minsplit=5,cp=0))
plotcp(ptitanicTree)
View(ptitanicTree)
ptitanicSimple <- prune(ptitanicTree,cp=0.0047)
plotcp(ptitanicSimple)
ptitanicOptimal <- prune(ptitanicTree,cp=ptitanicTree$cptable[which.min(ptitanicTree$cptable[,4]),1])
plotcp(ptitanicOptimal)
View(ptitanicOptimal)
prp(ptitanicOptimal,extra=1)
prp(ptitanicTree,extra=1)
prp(ptitanicOptimal,extra=1)
table(ptitanic$survived, predict(ptitanicOptimal, ptitanic, type="class"))
View(ptitanic)
prp(ptitanicOptimal,extra=3)
prp(ptitanicOptimal,extra=4)
prp(ptitanicOptimal,extra=5)
prp(ptitanicOptimal,extra=6)
prp(ptitanicOptimal,extra=20)
prp(ptitanicOptimal,extra=10)
prp(ptitanicOptimal,extra=3)
help(rpart)
prp(ptitanicTree,extra=3)
prp(ptitanicOptimal,extra=2)
prp(ptitanicTree,extra=2)
plotcp(ptitanicOptimal)
plotcp(ptitanicTree)
library(randomForest)
myData = read.table("letter-recognition.data",sep=",",col.names = c("lettr","x-box","y-box","width","high" ,"onpix"	,"x-bar"	,"y-bar"	,"x2bar","y2bar"	,"xybar","x2ybr"	,"xy2br","x-ege"	,"xegvy","y-ege"	,"yegvx"))
library(nnet, lib.loc = "/usr/lib/R/library")
install.packages("NeuralNetTools")
library(NeuralNetTools)
data("iris")
help(nnet)
force(iris)
mean(iris[,0:3])
lapply(iris)
mean(iris[,0:3])
lapply(iris,class)
mean(iris[,0:3])
mean(iris[,1:4])
apply(iris,class)
apply(iris[,1:4],2,class)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],2,var)
iris[,1:4] = scale(iris[,1:4])
apply(iris[,1:4],2,mean)
apply(iris[,1:4],2,var)
model1 = nnet(Species~., data=iris, size=5)
model1 = nnet(Species~., data=iris, size=5)
model1 = nnet(Species~., data=iris, size=5)
model1 = nnet(Species~., data=iris, size=5)
model1 = nnet(Species~., data=iris, size=5)
View(model1)
model2 = nnet(Species~., data=iris, size=2)
model2 = nnet(Species~., data=iris, size=2)
model2 = nnet(Species~., data=iris, size=2)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
model2 = nnet(Species~., data=iris, size=2, maxit = 1000)
plotnet(model2)
View(model2)
summary(model2)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6.R')
setwd("~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones")
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
x1
Y = 0.1*x2 > x1^2
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
Y = Y+1
plot(x1,x2,col=Y)
mean = apply(Y,2,mean)
mean = apply(Y,1,mean)
data = data.frame(x1,x2,Y)
mean = apply(Y,2,mean)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
#centrer r√©duire
data[,1:2] = scale(data[,1:2])
# NN
NN = nnet(Y~.,data,size=2,maxit=1000)
# NN
NN = nnet(Y~.,data,size=2,maxit=1000)
# NN
NN = nnet(Y~.,data,size=2,maxit=1000)
NN = nnet(Y~.,data,size=2,maxit=1000)
NN = nnet(Y~.,data,size=2,maxit=1000)
NN = nnet(Y~.,data,size=2,maxit=1000)
# NN
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
NN = nnet(Y~.,data=data,size=2,maxit=1000)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
NNsave = NN
summary(NN)
summary(NNsave)
plotnet(NNsave)
library(e1071)
plotnet(NNsave)
plot(NNsave)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
# NN
NN = nnet(Y~.,data=data,size=2,maxit=1000)
poidsZ1=NN$wts[1:3] # poids du 1er neuronne
poidsZ2=NN$wts[4:6] # poids du 2eme neuronne
abline(-poidsZ1[1]/poidsZ1[3],-poidsZ1[2]/poidsZ1[3],col="blue",lwd=5)
abline(-poidsZ2[1]/poidsZ2[3],-poidsZ2[2]/poidsZ2[3],col="orange",lwd=5)
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
source('~/Documents/S3/3-IA/Algorithmes-des-reseaux-de-neurones/Ex6_levrai.R')
NNsave = NN
plot(Z1,Z2,col=Y)
sigma1 = poidsZ1[1] + poidsZ1[2]*x1 + poidsZ1[3]*x2
sigma2 = poidsZ2[1] + poidsZ2[2]*x1 + poidsZ2[3]*x2
Z1 = 1/(1+exp(sigma1))
Z2 = 1/(1+exp(sigma2))
plot(Z1,Z2,col=Y)
abline(-poidsZ1[1]/poidsZ1[3],-poidsZ1[2]/poidsZ1[3],col="blue",lwd=5)
abline(-poidsZ2[1]/poidsZ2[3],-poidsZ2[2]/poidsZ2[3],col="purple",lwd=5)
plot(Z1,Z2,col=Y)
Z1 = 1/(1+exp(-sigma1))
Z2 = 1/(1+exp(-sigma2))
plot(Z1,Z2,col=Y)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="blue",lwd=5)
poidsY = NN$wts[7:9]
plot(Z1,Z2,col=Y)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="blue",lwd=5)
plot(Z1,Z2,col=Y)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="cyan",lwd=5)
plot(Z1,Z2,col=Y)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="mangenta",lwd=5)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="magenta",lwd=5)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="cyan",lwd=5)
plot(Z1,Z2,col=Y)
abline(-poidsY[1]/poidsY[3],-poidsY[2]/poidsY[3],col="cyan",lwd=5)
install.packages("rgl")
library(rgl)
library(rgl)
NN = nnet(Y~.,data=data,size=3,maxit=1000)
NN = nnet(Y~.,data=data,size=3,maxit=1000)
NN$wts
library(NeuralNetTools)
plotnet(NN)
plot3d(x1,x2,col=Y)
poidsH1 = NN$wts[1:3]
poidsH2 = NN$wts[4:6]
poidsH3 = NN$wts[7:9]
sig1 = poidsH1[1] + poidsH1[2]*x1 + poidsH1[3]*x2
sig2 = poidsH2[1] + poidsH2[2]*x1 + poidsH2[3]*x2
sig3 = poidsH3[1] + poidsH3[2]*x1 + poidsH3[3]*x2
H1 = 1/(1+exp(-sig1))
H2 = 1/(1+exp(-sig2))
H3 = 1/(1+exp(-sig3))
plot3d(H1,H2,H3,col=Y)
NN = nnet(Y~.,data=data,size=3,maxit=1000)
NN$wts
plotnet(NN)
plot3d(x1,x2,col=Y)
poidsH1 = NN$wts[1:3]
poidsH2 = NN$wts[4:6]
poidsH3 = NN$wts[7:9]
sig1 = poidsH1[1] + poidsH1[2]*x1 + poidsH1[3]*x2
sig2 = poidsH2[1] + poidsH2[2]*x1 + poidsH2[3]*x2
sig3 = poidsH3[1] + poidsH3[2]*x1 + poidsH3[3]*x2
H1 = 1/(1+exp(-sig1))
H2 = 1/(1+exp(-sig2))
H3 = 1/(1+exp(-sig3))
plot3d(H1,H2,H3,col=Y)
NN = nnet(Y~.,data=data,size=3,maxit=1000)
NN = nnet(Y~.,data=data,size=3,maxit=1000)
NN$wts
plotnet(NN)
plot3d(x1,x2,col=Y)
poidsH1 = NN$wts[1:3]
poidsH2 = NN$wts[4:6]
poidsH3 = NN$wts[7:9]
sig1 = poidsH1[1] + poidsH1[2]*x1 + poidsH1[3]*x2
sig2 = poidsH2[1] + poidsH2[2]*x1 + poidsH2[3]*x2
sig3 = poidsH3[1] + poidsH3[2]*x1 + poidsH3[3]*x2
H1 = 1/(1+exp(-sig1))
H2 = 1/(1+exp(-sig2))
H3 = 1/(1+exp(-sig3))
plot3d(H1,H2,H3,col=Y)
plotnet(NN)
plot(x1,x2,col=Y)
abline(-poidsH1[1]/poidsH1[3],-poidsH1[2]/poidsH1[3],col="blue",lwd=5)
abline(-poidsH2[1]/poidsH2[3],-poidsH2[2]/poidsH2[3],col="purple",lwd=5)
abline(-poidsH3[1]/poidsH3[3],-poidsH3[2]/poidsH3[3],col="cyan",lwd=5)
plot3d(H1,H2,H3,col=Y)
plot3d(H1,H2,H3,col=Y)
plot3d(H1,H2,H3,col=Y)
